// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tabloid.Data;

#nullable disable

namespace Tabloid.Migrations
{
    [DbContext(typeof(TabloidDbContext))]
    [Migration("20240528202943_seededDatabase")]
    partial class seededDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0a5e975-4843-4ee6-8252-fb40a280d44b",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEF6LwuWbwC+Ck+WbP9mLwqphGlvvkzXvvNwCntA802D59ykpcmcKHzXy4UIObeWPsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca73997b-a6ac-476c-a02b-985853c7d7b0",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13fe17db-af1d-403f-b0fb-6a132247f022",
                            Email = "john@doe.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENgVA5WElx0lDdi5lsesiu7Az7CBrGiIzo2BT1F9AWqK9+TJx/00ljzg6OeKMNkouQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64092e3b-a812-44fc-a97c-d4199e150aaf",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dd5af65-9227-4976-9874-dea6f1a50b24",
                            Email = "jane@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENtB5HzEIw+lDTFZnHe+F15xeSpqK5tD3KK8GyWt1BGIT80xT2y6zJNnDeqam+YhVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d8e1c5a-b68b-405c-aeff-3c42b51dd0fa",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eee2fcfe-4f18-4078-9561-dc3da7915c9b",
                            Email = "alice@johnson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDajmh+h3debAxKX2Q+8m2Fpn8f+UOkB9xF9ZBMfFlp6pCOMZrFCGLCsIMGx/Vqo0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52b99944-8560-4ad3-9806-af09ca546ad4",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eec044a3-938f-4fbe-9cef-686ae5750145",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDX7YKx35LoC9dM9FXtvAHRsbLnixzTssg9uaUzd9P3uY3qO4uQxo4MXN9HQQ1YCaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d81e139-d754-464b-937b-3c0727797984",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f991b3a-e27c-4275-b3e8-dab351db3cb3",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJUN0Y7OyspBuna4qL2GpbZKYRX5TcJqRIyi983FDsfRDHIQwKINV4lCpobWLMDYqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7d50c33-5d88-4bef-9caa-fe01e0b65dc3",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tabloid.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Category 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Category 2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Category 3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Category 4"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Category 5"
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfComment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Comment 1",
                            DateOfComment = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(150),
                            PostId = 1,
                            Subject = "Subject 1",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Comment 2",
                            DateOfComment = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(170),
                            PostId = 2,
                            Subject = "Subject 2",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Comment 3",
                            DateOfComment = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(190),
                            PostId = 3,
                            Subject = "Subject 3",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Comment 4",
                            DateOfComment = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(200),
                            PostId = 4,
                            Subject = "Subject 4",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Comment 5",
                            DateOfComment = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(220),
                            PostId = 5,
                            Subject = "Subject 5",
                            UserProfileId = 5
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeaderImage")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Content for Post 1",
                            CreationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9530),
                            HeaderImage = "https://via.placeholder.com/150",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9690),
                            Title = "Post 1",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Content for Post 2",
                            CreationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9710),
                            HeaderImage = "https://via.placeholder.com/150",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9740),
                            Title = "Post 2",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Content = "Content for Post 3",
                            CreationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9770),
                            HeaderImage = "https://via.placeholder.com/150",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9780),
                            Title = "Post 3",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Content = "Content for Post 4",
                            CreationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9790),
                            HeaderImage = "https://via.placeholder.com/150",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9800),
                            Title = "Post 4",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Content = "Content for Post 5",
                            CreationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9810),
                            HeaderImage = "https://via.placeholder.com/150",
                            IsApproved = true,
                            PublicationDate = new DateTime(2024, 5, 28, 15, 29, 40, 765, DateTimeKind.Local).AddTicks(9820),
                            Title = "Post 5",
                            UserProfileId = 5
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "https://via.placeholder.com/150",
                            Name = "Reaction 1",
                            PostId = 1,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Image = "https://via.placeholder.com/150",
                            Name = "Reaction 2",
                            PostId = 2,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            Image = "https://via.placeholder.com/150",
                            Name = "Reaction 3",
                            PostId = 3,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            Image = "https://via.placeholder.com/150",
                            Name = "Reaction 4",
                            PostId = 4,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            Image = "https://via.placeholder.com/150",
                            Name = "Reaction 5",
                            PostId = 5,
                            UserProfileId = 5
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FollowedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 6, 27, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(520),
                            FollowedUserId = 2,
                            StartDate = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(500),
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 6, 27, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(560),
                            FollowedUserId = 3,
                            StartDate = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(550),
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 6, 27, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(580),
                            FollowedUserId = 4,
                            StartDate = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(580),
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2024, 6, 27, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(600),
                            FollowedUserId = 5,
                            StartDate = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(600),
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 6, 27, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(630),
                            FollowedUserId = 1,
                            StartDate = new DateTime(2024, 5, 28, 15, 29, 40, 766, DateTimeKind.Local).AddTicks(620),
                            UserProfileId = 5
                        });
                });

            modelBuilder.Entity("Tabloid.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagName = "Tag 1"
                        },
                        new
                        {
                            Id = 2,
                            TagName = "Tag 2"
                        },
                        new
                        {
                            Id = 3,
                            TagName = "Tag 3"
                        },
                        new
                        {
                            Id = 4,
                            TagName = "Tag 4"
                        },
                        new
                        {
                            Id = 5,
                            TagName = "Tag 5"
                        });
                });

            modelBuilder.Entity("Tabloid.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            ImageLocation = "https://robohash.org/numquamutut.png?size=150x150&set=set1",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            ImageLocation = "https://robohash.org/nisiautemet.png?size=150x150&set=set1",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            ImageLocation = "https://robohash.org/molestiaemagnamet.png?size=150x150&set=set1",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            ImageLocation = "https://robohash.org/deseruntutipsum.png?size=150x150&set=set1",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            ImageLocation = "https://robohash.org/quiundedignissimos.png?size=150x150&set=set1",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            ImageLocation = "https://robohash.org/hicnihilipsa.png?size=150x150&set=set1",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tabloid.Models.Comment", b =>
                {
                    b.HasOne("Tabloid.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.Post", b =>
                {
                    b.HasOne("Tabloid.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.Reaction", b =>
                {
                    b.HasOne("Tabloid.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.Subscription", b =>
                {
                    b.HasOne("Tabloid.Models.UserProfile", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabloid.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Tabloid.Models.Tag", b =>
                {
                    b.HasOne("Tabloid.Models.Post", null)
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Tabloid.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Tabloid.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
